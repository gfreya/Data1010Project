{
  
    
        "post0": {
            "title": "SVD(Singular Value Decomposition) and PCA(Principle Component Analysis) in Image Processing",
            "content": "using LinearAlgebra, Statistics, StatsBase; . In many fields of research and application, it is usually necessary to observe the data with multiple variables, and then analyze and find the rules after collecting a large amount of data. Multivariate large data sets will undoubtedly provide rich information for research and application, but also increase the workload of data collection to a certain extent. More importantly, in many cases, there may be correlation among many variables, which increases the complexity of problem analysis. If each index is analyzed separately, the analysis is often isolated, and the information in the data can not be fully utilized. Therefore, the blind reduction of indicators will lose a lot of useful information, resulting in wrong conclusions. . We can have an intuitive example about the disaster gotten from high dimensional data. Different from text information, image information occupies a large capacity so that its storage and transmission will be greatly limited. Assume there is a still color image and its size is 600x800, which means it&#39;s 800 pixels long and 600 pixels wide and there are 480000 poxels on the screen. A pixel of a still color image needs three memory cells, so the single image needs $3*480000=1440000=1406.25$KB disk storage space. If the color image is transmitted at 24 frames per second, the amount of data per second is $24*1406.25$KB$ approx33$MB, then a 640MB CD-ROM can only store about 20 seconds of original data. With the present technology, it is difficult to meet the storage and transmission needs of the original digital image. We all know that image processing is an important task in the field of machine learning, so it is inevitable that we have to do something on the target images to compress the images and extract important features. . Therefore, it is necessary to find a reasonable method to reduce the loss of information contained in the original indicators while reducing the indicators to be analyzed, so as to achieve the purpose of comprehensive analysis of the collected data. Since there is a certain correlation between the variables, we can consider changing the closely related variables into as few new variables as possible, so that these new variables are uncorrelated, then we can use less comprehensive indicators to represent the various kinds of information in each variable. Dimension reduction is a preprocessing method for high dimensional feature data. Dimension reduction is to preserve some of the most important features of high-dimensional data, remove noise and unimportant features, so as to improve the speed of data processing. In the actual production and application, dimension reduction can save us a lot of time and cost in a certain range of information loss. Dimension reduction has become a widely used data preprocessing method and the kind of reduction has several strong points: . Make the data set feasible to explore and utilize | Decrease the number of feartures (only reserve the most important features) | Make sure the independence between features | Decrease the cost of algorithms | Make the results understandable | . So how to reduce dimensions like image compressing and features extraction is worth deep thinking. Thanks to the SVD(singular value decomposition which is a descent algebraic transformation, we can use the optimal matrix decompostion to do the image compression. Meanwhile, there is another similar method called PCA(principle component analysis) which is also used the matrix transformation and decomposition. The two methods have some connections and differences, they also have their own advantages. I want to introduction the mathematical conceptions behind SVD and PCA, explain the connections and difference between the two methods and compare the two methods via same task. . Mathematical Theory of SVD . Eigenvectors and Eigenvalues . We first review the definitions of eigenvalues and eigenvectors as follows: $Ax = lambda x$. In this formula, $A$ is an n $ times$ n real symmetric matrix, and $x$ is a vector of dimension n, then we say that $ lambda$ is an eigenvalue of matrix $A$, and $x$ is the eigenvector corresponding to the eigenvalue of matrix $A$. After we know the according eigenvalues and eigenvectors, we can do eigendecompositionn to the matrix $A$. Now we have n eigenvalues of matrix $A$: $ lambda_1 leq lambda_2 leq cdots leq lambda_n$ and the according eigenvectors {$w_1,w_2, cdots,w_n$}, if the n eigenvectors are linearly independent, then the matrix can be eigendecomposed as $A = W Sigma W^{-1}$. . $W$ is an n $ times$ n matrix composed of the n eigenvectors and $ Sigma$ is the n $ times$ n matrix with n eigenvalues on its main diagonal. Generaly, we will normalize the n eigenvectors in matrix $W$, namely satisefying $||w_i||_2 = 1$, or $w_i^T w_i = 1$. At this time, the eigenvectors of $W$ are the standard orthogonal bases, satisefying $W^TW=I$, namely $W^T = W^{-1}$. Then we can rewrite the eigendecomposition of matrix A: $A = W Sigma W^T$. . To clarify one important point of eigendecomposition: the matrix $A$ must be a square matrix. So another question comes up: if the matrix $A$ is not a square matrix which means that the numbers of columns and rows are not the same, can we decompose the matrix $A$? The answer is definitely yes, and it just introduces the main topic SVD(singular value decomposition). . Definition of SVD . SVD is another method to decompose a matrix. Different from the eigen decomposition, SVD does not require the decomposed matrix to be the square one. Assume we have an m $ times$ n matrix A, then we can define SVD of matrix $A$ as: $A = U Sigma V^T$. The matrix $U$ is an m $ times$ m matrix. The matrix $ Sigma$ is an m $ times$ n matrix with singular values on the main diagonal. The matrix $V$ is an n $ times$ n matrix. The matrix $U$ and $V$ satisefy $U^TU=I$ and $V^TV=I$. The following image can express the decomposition clearly. . . We all know that the matrix A here is not a square matrix, so we can do the matrix multiplication of the transpose of A and A. Then we can get an n x n matrix $A^TA$. Since the new created matrix $A^TA$ is a square one, we can do the eigen decomposition to them. Then the following formula can represent the process: $(A^TA)v_i = lambda_iv_i$. According the formula, we can get the n eigenvalues and the n according eigenvectors $ boldsymbol{v}$. We can get the matrix $V$ using all eigenvectors of $A^TA$, the matrix $V$ is just the same $V$ in the formula of SVD. Generally, we call each eigenvector in matrix $V$ the right singular vector of $A$. . The same idea as above, but we will do all same step to $AA^T$. Then we can get $(AA^T)v_i = lambda_iu_i$. Similarly, we call each eigenvector in matrix $U$ the left singular vector of $A$. . Now we can solve $U$ and $V$, the only problem is how to calculate the singular matrix $ Sigma$. We know that $ Sigma$ only has the singular values on the main diagonal and all other positions with value 0. So we only need to solve each singular value $ sigma$. We can know that: $$ A = U Sigma V^T Rightarrow AV = U Sigma V^TV Rightarrow AV = U Sigma Rightarrow Av_i = sigma_iu_i Rightarrow sigma_i = Av_i/u_i $$ . We can also verify that the eigenvectors of $A^TA$ and $AA^T$ make up the matrix $V$ and matrix $U$ in SVD using the following formula: $$ A = U Sigma V^T Rightarrow A^T = V Sigma^T U^T Rightarrow A^TA = V Sigma^T U^T U Sigma V^T = V Sigma^2V^T $$ From the above formula, we can see that $U^TU=I$ and $ Sigma^T Sigma = Sigma^2$. Similarly, we can get that the eigenvectors matrix equals to the square of singular value vectors matrix which means we can know the relationship between the eigenvalues and singular values: $ sigma_i = sqrt{ lambda_i}$. . If you want to learn more about the process of SVD, please refer to . DataGymnasia:https://mathigon.org/course/linear-algebra/singular-value-decomposition . Properties of SVD . Similar to the eigenvalues in eigen decomposition, the singular values arrange from larger to small in the singular values matrix, also the values decrease fast. That is to say, the sum of first 20% or even 1% of the whole singular values will account for more than 99% of the sum of all singular values generally. In another word, the useful property of SVD is that we can use the largest $k$ singular values and the corresponding sigular vectors to approximately represent the target matrix. The whole process can be represented as the following formula: $$ A_{mxn} = U_{mxm} Sigma_{mxn}V^T_{nxn} approx U_{mxk} Sigma_{kxk}V^T_{kxn} $$ $k$ is much smaller than $n$, so the large target matrix $A$ can be represented by three small matrices $U_{mxk}$,$ Sigma_{kxk}$,$V^T_{kxn}$. We can use a diagram to represent the process. . . Mathematical Theory of PCA . The meaning of PCA(principle component analysis is to find the most inportant part of data to substitute the raw data. PCA is one of the most important dimension reduction methods. In detail, assume we have an $n$ dimension dataset with m data $(x_1,x_2, cdots,x_m)$. We want to reduce the dimensions of this data from $n$ dimensions to $k$ dimensions, and hope the $k$ dimensions data can best represent the raw data. The loss cannot be inevitable during the dimension reduction process, so we want to minimaize the loss. . We can see a very easy condition where $n$=2 and $k$=1. That is to say, the task is to reduce the dimensions of the data from 2 to 1. The data are shown as below. . . According to the diagram above, we want to find one dimension to represent the 2-d data. We have two vectors listed in the diagram $ mu_1$ and $ mu_2$. Obviously, we will choose $ mu_1$. There are two main reasons. One is that the projections of the data on the line of $ mu_1$ direction will be best separate, the other is that the distances from the sample data to the line are enough small. If we want to make the $k$ from $1$ dimension to any dimensions, the criteria have the same thoughts: the projections of sample data on the hyperplane must be separatable enough and the distances between sample data and the hyperplane must be small enough. . Derivation and Calculation of PCA . Based on Eigenvalues . Assume we have $m$ $n$-dimension data $(x_1, x_2, cdots, x_m$ with centralization, which means that the sum of the $m$ data is $0$. All $m$ data satisefy that $ sum_{i=1}^{m}{x_i}$=$0$. Also, we can assume that the new coordinate system with the bases after the projection transformation will be {$ boldsymbol {w_1, w_2, cdots, w_n}$}, and $ boldsymbol w$ is the orthonormal basis. What we want to do in PCA is to reduce the dimensions from $n$ to $k$, which means that we need to drop some useless coordinates and create a new coordinate system {$ boldsymbol {w_1, w_2, cdots, w_k}$}. Then one of the sample data $x_i$ will have the expression for its projection in this $k$-dimension coordinate system: $p_i$ = $(p_{i1}, p_{i2}, cdots, p_{ik})^T$, and $p_{ij}$=$w_j^T x_i$ which means that the it is the coordinate of $x_i$ in the $j$th dimension of the original $n$-dimension coordinate system, namely $w_j$. . For any sample data $x_i$, it has the projection $W^Tx_i$ and the projection variance $x_iWW^Tx_i$. We want to maximize the sum of the projection variance of all sample data, so we will maximize the trace of $ sum_{i=1}^{m}{W^Tx_ix_i^TW}$, the following formula represents the whole thing: . Objective function: ${argmax}$ $tr(W^TXX^TW)$ . Constarint function: $ W^TW = I$ . To solve the above optimization problem, we can introduce the Lagrange multiplier $ lambda$, so we can get the new Lagrange function: $$ L(W) = tr(W^TXX^TW + lambda(W^TW-I)) $$ Then we can do the derivative for argument $W$ and we can get that: $$ XX^TW + lambda W = 0 Rightarrow XX^TW = - lambda W $$ . Interestingly, we can find that the expression is very similar to the eigen decomposition, so we can do some conclusions about the matrix $XX^T$ and the meaning of $- lambda$. We can say that $W$ is the matrix which consists of the $k$ eigenvectors of matrix $XX^T$ and $- lambda$ is just the eigenvalue matrix with eigenvalues on the diagonal and $0$ on other positions. When we want to do the dimension reduction, we just need to find the corresponding eigenvectors of the $k$ biggest eigenvalues. The $k$ eigenvectors just construct the needed matrix $W$. . If you want to learn more about the process of PCA, please refer to . wikipedia:https://en.wikipedia.org/wiki/Principal_component_analysis . Mathematical Example of PCA . Based on Eigenvalues . I want to give an easy example that can represent the process of PCA clearly and understandably. . Assume we have a matrix $X$ = $ left lgroup begin{matrix}-1 &amp; -1 &amp; 0 &amp; 2 &amp; 0 cr -2 &amp; 0 &amp; 0 &amp; 1 &amp; 1 end{matrix} right rgroup$, we want to use PCA to make the $2$-dimension data to $1$-dimension. . X = [-1 -1 0 2 0; -2 0 0 1 1] . 2×5 Array{Int64,2}: -1 -1 0 2 0 -2 0 0 1 1 . Make sure the target matrix is centralization. | . println(mean(X[1,:])) println(mean(X[2,:])) . 0.0 0.0 . We can find that the mean value of each line of the matrix $X$ is $0$, so we do not need to do any change. . Calculate the covariance matrix. | . The covariance matrix is $ frac{1}{n}XX^T$. (the use of $ frac{1}{n}$ or $ frac{1}{n-1}$ does not have too much influence) . cXXᵀ = 1/length(X[1,:]) * X * X&#39; . 2×2 Array{Float64,2}: 1.2 0.8 0.8 1.2 . The whole calculation of the covariance process is $$ cXX^T = frac{1}{5} left lgroup begin{matrix}-1 &amp; -1 &amp; 0 &amp; 2 &amp; 0 cr -2 &amp; -0 &amp; 0 &amp; 1 &amp; 1 end{matrix} right rgroup left lgroup begin{matrix}-1 &amp; -2 cr -1 &amp; 0 cr 0 &amp; 0 cr 2 &amp; 1 cr 0 &amp; 1 end{matrix} right rgroup = left lgroup begin{matrix}1.2 &amp; 0.8 cr 0.8 &amp; 1.2 end{matrix} right rgroup $$ . Calculate the eigenvalues and eigenvectors of the covariance matrix. | . eigvals(cXXᵀ) . 2-element Array{Float64,1}: 0.4 2.0 . P = -eigvecs(cXXᵀ) . 2×2 Array{Float64,2}: -0.707107 0.707107 0.707107 0.707107 . By calculation, we can get that the eigenvalues are $ lambda_1=2$ and $ lambda_2=0.4$. The corrsponding eigenvectors are $v_1$ = $ left lgroup begin{matrix} frac{1}{ sqrt 2} cr frac{1}{ sqrt 2} end{matrix} right rgroup$ and $v_2$ = $ left lgroup begin{matrix}- frac{1}{ sqrt 2} cr frac{1}{ sqrt 2} end{matrix} right rgroup$, then we can get the matrix $P$ = $ left lgroup begin{matrix} frac{1}{ sqrt 2} frac{1}{ sqrt 2} cr - frac{1}{ sqrt 2} frac{1}{ sqrt 2} end{matrix} right rgroup$. . Get the dimension reduction reuslt | . We need to get the $1$-dimention result, so we only get the eigenvector corresponding to the largest eigenvalue. . We can use julia to get the same result, and also we can have a very clear diagram to see the whole process. . Y = P*X Y[2,:] using Plots p = scatter(X[1,:],X[2,:], label=&quot;raw points&quot;) plot!(-3:0.01:3, x-&gt;x, label=&quot;projection plane&quot;) raw_p = Tuple.([[-1,-2],[-1,0],[0,0],[0,1],[2,1]]) proj_p = Tuple.([[-1.5,-1.5],[-0.5,-0.5],[0,0],[0.5,0.5],[1.5,1.5]]) scatter!(proj_p, opacity=0.5, color=&quot;pink&quot;, label=&quot;proj_points&quot;) for i in 1:5 plot!(p,[raw_p[i],proj_p[i]],arrow=arrow(), color=&quot;purple&quot;, label=&quot;&quot;) end p savefig(p, &quot;pca-example.png&quot;); . . Relationship between SVD and PCA . Generally speaking, if we want to use PCA to reduce dimensions, we want to find the $k$ eigenvectors corresponding to the $k$ largest eigenvalues of the covariance matrix $ frac{1}{n}X^TT$. Then we can use the projection matrix consisting of the $k$ eigenvectors as the projection hyperplane. From the process, we can know that it is inevitable that we always need to get the result of the covariance matrix $ frac{1}{n}X^TX$. But when the features of the sample data are very large, the calculation process will both time comsuming and space consuming. . We can also use SVD to get the projection matrix using the $k$ eigenvectors. But the reason why I want to mention about the advantages of SVD is that some algorithms of SVD can still get the result of right sigular matrix $V$ without calculating the covariance matrix $ frac{1}{n}X^TX$. That is to say, our PCA algorithms do not need to do the eigen decomposition, instead, we can let SVD to complete this. This method is very effective and efficient when the sample data are very large. . Write the mathematical process in relation csdn. . https://blog.csdn.net/Dark_Scope/article/details/53150883 . There is another interesting aspect deserves exploration. We can find that PCA only use the right singular matrix $V$ of SVD, so we may ask whether the left one is useless. The answer is definitely no. We can assume a sample data matrix which is m $ times$ n. Then we find the left singular matrix $U$ using the $k$ eigenvectors of matrix $ frac{1}{n}XX^T$ from SVD, then we can a new matrix $X^l$: $$ X^l_{k times n} = U^T_{k times m}X_{m times n} $$ We can easily find that the new matrix $X^l$ has the rows from $m$ to $k$ compared to the raw matrix $X$. So we can get the conclusion that the left singular matrix can condense the rows number while the right singular matrix can condense the columns which is often used in PCA. . Generally speaking, SVD creates a square matrix via constructing the original data matrix A and the expression ${A^{T}} cdot A$. .",
            "url": "https://gfreya.github.io/Data1010Project/jupyter/2020/11/13/post.html",
            "relUrl": "/jupyter/2020/11/13/post.html",
            "date": " • Nov 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . NameError Traceback (most recent call last) &lt;ipython-input-3-cdbd5deae5eb&gt; in &lt;module&gt; 1 #hide_input -&gt; 2 alt.Chart(df).mark_circle().add_selection( 3 alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) 4 ).encode( 5 alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), NameError: name &#39;alt&#39; is not defined . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gfreya.github.io/Data1010Project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gfreya.github.io/Data1010Project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gfreya.github.io/Data1010Project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gfreya.github.io/Data1010Project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}